<template>
  <div class="cart">
    <div class="tabs">
      <a class="tab active">
        <span>全部</span>
      </a>
      <router-link class="tab" exact :to="{ path: '/cart/wishlist' }">
        <span>到货提醒</span>
      </router-link>
    </div>
    <div class="books">
      <div class="book" v-for="cart in carts" :key="cart.id">
        <v-checkbox :checks="checks" :value="cart.id" @update='changeCheck(cart.id)' ></v-checkbox>
        <div class="content">
          <img :src="cart.book.cover" alt="">
          <div class="info">
            <h2 class="title">
              {{cart.book.name}}
              <div class="close" @click.stop="delCart(cart.id)">
                <svg viewBox="19 19 22 22" stroke-linecap="round" width="10" height="10"
                     stroke="rgb(170, 170, 170)">
                  <g transform="translate(21.000000, 21.000000)">
                    <path d="M0.333333333,0.333333333 L17.4148373,17.4148373"></path>
                    <path d="M0.333333333,0.333333333 L17.4148373,17.4148373"
                          transform="translate(9.000000, 9.000000) scale(-1, 1) translate(-9.000000, -9.000000)">
                    </path>
                  </g>
                </svg>
              </div>
            </h2>
            <div class="desc">{{conditions[cart.condition]}}</div>
            <div class="condition">
              <div class="price">￥{{cart.book.price*cart.discount / 10 | numeral}}</div>
              <!-- <div class="lock">锁定</div> -->
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="navs">
      <div class="coupon">
        查看3张优惠券
        <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
             stroke-linecap="round" stroke-linejoin="round" xmlns="http://www.w3.org/2000/svg" class="Icon">
          <polyline points="9 18 15 12 9 6"></polyline>
        </svg>
      </div>
      <div class="settle">
        <div class="selected">
          <v-checkbox :checked="checkedAll" @update='changeCheckAll' ></v-checkbox>
          已选{{checks.length}}
        </div>
        <div class="text">
          <div class="price">￥{{total | numeral}}</div>
          <div class="desc"></div>
        </div>
        <div class="submit">
          结算
        </div>
      </div>
    </div>
    <router-link tag="div" class="toHome" :to="{ path: '/' }">
      <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 22 22">
        <path
          fill="none"
          stroke="#fff"
          stroke-width="1.5"
          d="M19.022 10.252v7.64a3 3 0 0 1-3 3H5.66a3 3 0 0 1-3-3v-7.676C.582 9.8.393 8.267 2.424 6.429l4.212-3.814c2.378-2.153 6.226-2.16 8.612 0L19.46 6.43c2.088 1.89 1.825 3.466-.438 3.823zM7.76 20.865h6.364v-4.327c0-1.11-.711-2.005-1.59-2.005H9.35c-.878 0-1.59.898-1.59 2.005v4.327z"
        />
      </svg>
    </router-link>
  </div>
</template>

<script>
import VCheckbox from "../../components/checkbox/Checkbox"

const CART_URL = "/cart";

export default {
  name: 'cart',
  data () {
    return {
      checks: [],
      carts:[],
      conditions: ["品相良好", "品相中等"],
      pager: {
        pageNum: 1,
        pageSize: 5,
        total: 0,
        pages: -1,
        lastPage: false
      },
      loading: false,
      bookScorll: null
    }
  },
  created () {
    this.refreshCart(1);
  },
  methods: {
    //刷新数据
    async refreshCart(pageNum) {
      if (this.loading) {
        return;
      }
      // this.loading = true; // 显示加载图标
      let pageSize = this.pager.pageSize;
      let pages = this.pager.pages;
      // 是否是最一页
      // if (this.pager.lastPage) {
      //   this.loading = false;
      //   return;
      // }

      pageNum = pageNum <= 0 ? 1 : pageNum;

      let data = await this.$http.get(CART_URL, {
        params: {
          pageSize,
          pageNum
        }
      });
      console.info(data.data);
      let pager = data.data;
      if (data.code === 0) {
        //有数据返回追加
        if (pager.list.length) {
          this.carts = pager.list;
          this.$set(this.pager, "pageNum", pager.pageNum);
          this.$set(this.pager, "pageSize", pager.pageSize);
          this.$set(this.pager, "total", pager.total);
          this.$set(this.pager, "pages", pager.pages);
          this.$set(this.pager, "lastPage", pager.lastPage);
        }
        this.filterCheck();
      }
      // this.loading = false;
      // this.getScorllHeight();
    },
    //删除购物车商品
    async delCart(id){
      let data = await this.$http.delete(CART_URL+"/"+id);
      if(data.code === 0){
        this.refreshCart(this.pager.pageNum);
      }
    },
    filterCheck(){
      this.checks = this.carts.filter(cart => cart.hasSelected).map(cart => cart.id);
    },
    //修改选中状态
    async changeCheck(id){
      
      let data = await this.$http.patch(CART_URL+"/"+id);
      console.info(data)

      if(data.code === 0){
        this.refreshCart(this.pager.pageNum);
      }
    },
    // 批量选中或取消
    async changeCheckAll () {
      let selected = 1;
      // debugger
      if(this.checkedAll){
        selected = 0;
      }
      let checks = this.carts.map(cart => cart.id);
      let data = await this.$http.put(CART_URL+"?selected="+selected,checks);
      if(data.code === 0){
        console.info(data.code)
        this.refreshCart(this.pager.pageNum);
      }
    }

    //获取滚动条高度
    // getScorllHeight() {
    //   this.$nextTick(function() {
    //     let ele = this.$refs.home;
    //     console.info(ele);
    //     let firstElTop = ele.offsetTop;
    //     console.info(firstElTop);
    //     this.bookScorll = ele.scrollHeight;
    //   });
    // },
    //当前滚动条位置
    // scrollHander(e) {
    //   let ele = this.$refs.home;
    //   if (ele.scrollTop + ele.clientHeight === this.bookScorll) {
    //     this.refresh(this.pager.pageNum + 1);
    //   }
    // },
  },
  computed: {
    //是否全选
    checkedAll() {
      return this.carts.length > 0 && this.checks.length === this.carts.length
    },
    total () {
      if(!this.checks.length) {
        return 0;
      }
      let total = this.carts.filter(cart => this.checks.includes(cart.id)).reduce((prev, cart) => prev + cart.book.price * cart.discount * 0.1, 0);
      console.info(total);
      return total;
    }
  },
  components: {
    VCheckbox
  }
}
</script>
<style lang="scss" scoped>
  .cart {
    overflow-y: scroll;
    height: calc(100vh - 95px);
    .tabs {
      display: flex;
      height: 50px;
      border-bottom: 0.5px solid #f2f2f2;
      .tab {
        color: #333333;
        text-decoration: none;
        flex: 1;
        display: flex;
        justify-content: center;
        &.active {
          color: #18c3aa;
          span {
            border-bottom: 3px solid #18c3aa;
          }
        }
        span {
          margin-top: 3px;
          display: flex;
          justify-content: center;
          align-items: center;
          border-bottom: 3px solid #fff;
        }
      }
    }
    @mixin checkbox {
      .checkbox {
        margin-right: 12px;
        align-self: center;
        border: 1px solid rgb(24, 195, 170);
        border-radius: 999px;
        font-size: 18px;
        text-align: center;
        width: 23px;
        height: 23px;
        &.checked {
          background: rgb(24, 195, 170);
        }
      }
    }
    .books {
      background: #fff;
      .book {
        border-top: 0.5px solid rgb(242, 242, 242);
        padding: 21px 15px;
        display: flex;
        @include checkbox;
        .content {
          flex: 1;
          display: flex;
          img {
            width: 50px;
            height: 70px;
          }
          .info {
            flex: 1;
            margin-left: 12px;
            .title {
              color: #333;
              font-size: 14px;
              margin: 0 auto;
              display: flex;
              justify-content: space-between;
            }
            .desc {
              font-size: 12px;
              color: #666;
              margin-top: 4px;
            }
            .condition {
              display: flex;
              justify-content: space-between;
              align-items: flex-end;
              .price {
                color: #333;
              }
              .lock {
                font-size: 12px;
                padding: 6px 10px;
                background-color: rgb(255, 255, 255);
                color: rgb(24, 195, 170);
                white-space: nowrap;
                border: .5px solid rgb(242, 242, 242);
                border-radius: 999px;
                text-align: center;
                border-color: rgb(24, 195, 170);
              }
            }
          }
        }
      }
    }
    .navs {
      position: fixed;
      bottom: 0;
      left: 0;
      width: 100%;
      background: rgb(247, 247, 247);
      .coupon {
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 13px;
        color: rgb(24, 195, 170);
        background-color: rgba(24, 195, 170, 0.1);
        text-align: center;
        font-size: 13px;
        cursor: pointer;
        padding: 8px 0px;
      }
      .settle {
        padding: 10px 15px;
        display: flex;
        align-items: center;
        white-space: nowrap;
        .selected {
          display: flex;
          @include checkbox;
        }
        .text {
          flex-grow: 1;
          margin-right: 15px;
          .price {
            margin-left: 10px;
            text-align: right;
            line-height: 1.2;
            font-size: 20px;
            color: rgb(242, 129, 129);
          }
          .desc {
            display: flex;
            justify-content: flex-end;
            align-items: center;
            font-size: 12px;
            color: rgb(170, 170, 170);
          }
        }
        .submit {
          flex: 0;
          box-sizing: border-box;
          width: 132px;
          border-radius: 3px;
          color: #fff;
          background: rgb(24, 195, 170);
          border-color: rgb(24, 195, 170);
          padding: 8px 1.5em 8px;
          font-size: 18px;
          text-align: center;
        }
      }
    }
    .toHome {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 46px;
      height: 46px;
      position: fixed;
      bottom: 96px;
      right: 16px;
      box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 8px 0px;
      border-radius: 50%;
      background: rgba(102, 102, 102, 0.96);
    }
  }
</style>
